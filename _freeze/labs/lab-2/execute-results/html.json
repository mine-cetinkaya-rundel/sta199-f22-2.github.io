{
  "hash": "cc183a5bc6e334be53bfe91e6d7eeae0",
  "result": {
    "markdown": "---\ntitle: \"Lab 2 - wrangling-data\"\ncategories: \"Lab\"\nexecute:\n  eval: false\n---\n\n\n::: callout-important\nThis lab is due Monday, Sep 19 at 11:59pm.\n:::\n\n# Learning goals\n\nIn this lab, you will...\n\n-   Data wrangling and visualization\n\n# Getting started \n\n-   Go to the sta199-fa22-02 organization on GitHub. Click on the repo with the prefix lab-02. It contains the starter documents you need to complete the lab.\n\n-   Clone the repo and start a new project in RStudio. See the [Lab 0 instructions](https://sta199-f22-2.github.io/labs/lab-0.html#clone-the-repo-start-new-rstudio-project) for details on cloning a repo and starting a new R project.\n\n# Getting started\n\n-   Go to the course GitHub organization and locate your lab repo, which should be named `lab-03-nobel-laureates-YOUR_GITHUB_USERNAME`.\n-   Grab the URL of the repo, and clone it in RStudio.\n-   First, open the Quarto document `lab-03.qmd` and Render it.\n-   Make sure it compiles without errors.\n\n## Warm up\n\nBefore we introduce the data, let's warm up with some simple exercises.\n\n-   Update the YAML, changing the author name to your name, and **render** the document.\n-   Commit your changes with a meaningful commit message.\n-   Push your changes to GitHub.\n-   Go to your repo on GitHub and confirm that your changes are visible in your Qmd **and** pdf files. If anything is missing, commit and push again.\n\n## Packages\n\nWe'll use the **tidyverse** package for much of the data wrangling.\nThis package is already installed for you.\nYou can load them by running the following in your Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Data\n\nThe dataset for this assignment can be found as a CSv (comma separated values) file in the `data` folder of your repository.\nYou can read it in using the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel <- read_csv(\"labs/data/nobel.csv\")\n```\n:::\n\n\nThe variable descriptions are as follows:\n\n-   `id`: ID number\n-   `firstname`: First name of laureate\n-   `surname`: Surname\n-   `year`: Year prize won\n-   `category`: Category of prize\n-   `affiliation`: Affiliation of laureate\n-   `city`: City of laureate in prize year\n-   `country`: Country of laureate in prize year\n-   `born_date`: Birth date of laureate\n-   `died_date`: Death date of laureate\n-   `gender`: Gender of laureate\n-   `born_city`: City where laureate was born\n-   `born_country`: Country where laureate was born\n-   `born_country_code`: Code of country where laureate was born\n-   `died_city`: City where laureate died\n-   `died_country`: Country where laureate died\n-   `died_country_code`: Code of country where laureate died\n-   `overall_motivation`: Overall motivation for recognition\n-   `share`: Number of other winners award is shared with\n-   `motivation`: Motivation for recognition\n\n\nIn a few cases the name of the city/country changed after laureate was given (e.g. in 1975 Bosnia and Herzegovina was called the Socialist Federative Republic of Yugoslavia).\nIn these cases the variables below reflect a different name than their counterparts without the suffix \\`\\_original\\`.\n\n-   `born_country_original`: Original country where laureate was born\n-   `born_city_original`: Original city where laureate was born\n-   `died_country_original`: Original country where laureate died\n-   `died_city_original`: Original city where laureate died\n-   `city_original`: Original city where laureate lived at the time of winning the award\n-   `country_original`: Original country where laureate lived at the time of winning the award\n\n## Get to know your data\n\n1.  How many observations and how many variables are in the dataset? Use inline code to answer this question. What does each row represent?\n\nThere are some observations in this dataset that we will exclude from our analysis to match the Buzzfeed results.\n\n2.  Create a new data frame called `nobel_living` that filters for\n\n-   laureates for whom `country` is available\n-   laureates who are people as opposed to organizations (organizations are denoted with `\"org\"` as their `gender`)\n-   laureates who are still alive (their `died_date` is `NA`)\n\n\n::: {.cell}\n\n:::\n\n\nConfirm that once you have filtered for these characteristics you are left with a data frame with *r nrow(nobel_living)*` observations, once again using inline code.\n\n## Most living Nobel laureates were based in the US when they won their prizes\n\n... says the Buzzfeed article.\nLet's see if that's true.\n\nFirst, we'll create a new variable to identify whether the laureate was in the US when they won their prize.\nWe'll use the `mutate()` function for this.\nThe following pipeline mutates the `nobel_living` data frame by adding a new variable called `country_us`.\nWe use an if statement to create this variable.\nThe first argument in the `if_else()` function we're using to write this if statement is the condition we're testing for.\nIf `country` is equal to `\"USA\"`, we set `country_us` to `\"USA\"`.\nIf not, we set the `country_us` to `\"Other\"`.\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\nNote that we can achieve the same result using the `fct_other()` function we've seen before (i.e. with `country_us = fct_other(country, \"USA\")`). We decided to use the `if_else()` here to show you one example of an if statement in R.\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nNext, we will limit our analysis to only the following categories: Physics, Medicine, Chemistry, and Economics.\n\n\n::: {.cell}\n\n:::\n\n\nFor the next exercise work with the `nobel_living_science` data frame you created above.\nThis means you'll need to define this data frame in your R Markdown document, even though the next exercise doesn't explicitly ask you to do so.\n\n3.  Create a faceted bar plot visualizing the relationship between the category of prize and whether the laureate was in the US when they won the nobel prize.\n    Interpret your visualization, and say a few words about whether the Buzzfeed headline is supported by the data.\n\n    -   Your visualization should be faceted by category.\n    -   For each facet you should have two bars, one for winners in the US and one for Other.\n    -   Flip the coordinates so the bars are horizontal, not vertical.\n\n::: render-commit-push\n\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\n<br>\n:::\n\n## But of those US-based Nobel laureates, many were born in other countries\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\n**Hint:** You should be able to ~~cheat~~ borrow from code you used earlier to create the `country_us` variable.\n```\n:::\n\n\n4.  Create a new variable called `born_country_us` that has the value `\"USA\"` if the laureate is born in the US, and `\"Other\"` otherwise.\n    How many of the winners are born in the US?\n\n5.  Add a second variable to your visualization from Exercise 3 based on whether the laureate was born in the US or not.\n    Based on your visualization, do the data appear to support Buzzfeed's claim?\n    Explain your reasoning in 1-2 sentences.\n\n    -   Your final visualization should contain a facet for each category.\n    -   Within each facet, there should be a bar for whether the laureate won the award in the US or not.\n    -   Each bar should have segments for whether the laureate was born in the US or not.\n    \n::: render-commit-push\n\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\n<br>\n:::\n\n6.  In a single pipeline, filter for laureates who won their prize in the US, but were born outside of the US, and then create a frequency table (with the `count()` function) for their birth country (`born_country`) and arrange the resulting data frame in descending order of number of observations for each country. Which country is the most common?\n\n::: render-commit-push\n\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\n<br>\n:::\n\n# Submission\n\nOnce you are finished with the lab, you will your final PDF document to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission deadline to be considered \"on time\".\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with exercise. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\"). *If you do not do this, you will be subject to lose points on the assignment.*\n-   Select the first page of your .pdf submission to be associated with the *\"Workflow & formatting\"* question.\n\n# Grading (50 pts)\n\n| Component             | Points |\n|:----------------------|:-------|\n| Ex 1                  |       |\n| Ex 2                  |       |\n| Ex 3                  |       |\n| Ex 4                  |       |\n| Ex 5                  |       |\n| Ex 6                  |       |\n| Workflow & formatting |       |\n\n::: callout-note\nThe \"Workflow & formatting\" grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages, labeling the code chunks, and having readable code that does not exceed 80 characters, i.e., we can read all your code in the rendered PDF.\n:::\n\n",
    "supporting": [
      "lab-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}