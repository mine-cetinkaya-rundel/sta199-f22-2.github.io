{
  "hash": "403be885551e0e898afc524393c58d92",
  "result": {
    "markdown": "---\ntitle: \"Logistic Regression\"\nsubtitle: \"Lecture 19\"\ndate: \"November 2nd, 2022\"\nformat: revealjs\n---\n\n\n## Checklist\n\n-- Clone `ae-18`\n\n## Announcements\n\n-- You have a `final-project` repo. Clone it before lab tomorrow. \n\n-- HW4 extended to Thursday - Check Sakai \n\n## Goals\n\n-- The What, Why, and How of Logistic Regression \n\n\n## What is Logistic Regreesion \n\n- Modeling tool when our response is categorical \n\n## Terms \n\n-- Bernoulli Distribution \n\n- 2 outcomes: Success (p) or Failure (1-p)\n\n- $y_i$ ~ Bern(p)\n\n- What we can do is we can use our explanatory variable(s) to model p\n\n## 2 Steps \n\n-- 1: Define a linear model \n\n-- 2: Define a link function \n\n\n## A linear model \n\n$\\eta = \\beta_oX_1 + ...$\n\n\n- But we can't stop here\n\n\n- Next, we need a link function that relates the linear model to the parameter of the outcome distribution i.e. transform the linear model to have an appropriate range \n\n\n\n## Goal \n\n-- Or.... takes values between negative and positive infinity and map them to probabilities\n\n\n## Logit Link function \n\n-- A logit link function transforms the probabilities of the levels of a categorical response variable to a continuous scale that is unbounded\n\nlogit(p) = $log(\\frac{p}{1-p})$ \n\n$logit(p_i)$ = $\\beta_o +\\beta_1X1_i + ....$\n\n## What's this look like\n\n![](images/logit.png){fig-align = center}\n\n\n## This isn't exactly what we need though.....\n\n-- Recall, the goal is to take values between $-\\infty and \\infty$ and map them to probabilities. We need the opposite of the link function... or the *inverse*\n\n-- How do we take the inverse of a natural log? \n\n\n## So \n\n-- $\\eta_i = \\beta_o +\\beta_1X1_i + ....$\n\n-- logit(p) = $\\beta_o +\\beta_1X1_i + ....$ \n\n- $pi = \\frac{exp(\\beta_o + \\beta_1X_1 + ...)} {1 + exp(\\beta_o + \\beta_1X_1 + ...) }$\n\n##\n\nExample Figure: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigmoid = function(x) 1 / (1 + exp(-x + 10))\nplot.function(sigmoid, from = 0, to = 20, n = 101, ylab=\"P(y = 1)\", \n              xlab = \"Explanatory variable\", \n              main=\"Example predicted probabilities based on explanatory variable\", \n              lwd = 3)\nbox()\n```\n\n::: {.cell-output-display}\n![](19-logistic_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n\n## Takeaways \n\n-- We can not model these data using the tools we currently have \n\n-- We can overcome some of the shortcoming of regression by fitting a *generalized linear regression model*\n\n-- We can model binary data using an inverse logit function to model probabilities of success ",
    "supporting": [
      "19-logistic_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}