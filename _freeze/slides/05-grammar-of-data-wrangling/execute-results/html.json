{
  "hash": "9e4fd42ace1445ffecad69cf78f2aebe",
  "result": {
    "markdown": "---\ntitle: \"Grammar of data wrangling\"\nsubtitle: \"Lecture 5\"\ndate: \"September 12, 2022\"\nformat: revealjs\n---\n\n\n\n\n## Checklist \n\n--   Clone your `ae-04` repo.\n\n--   Turn in Lab 1 via Gradescope \n\n--   Reach out (OH should all be updated)\n\n--   Reminder: AEs due Thursday and Saturday 11:59; Labs due Monday; HWs due in 1 week from assigned\n\n## Goals \n\n-   Understand *why* we need to manipulate data\n\n-   Calculate summary measures for data sets \n\n-   Manipulate the format of data \n\n-   Practice with tidyverse functions\n\n\n\n## Can't Commit? \n\n![](images/05-data-wrangling/projectpush.png){fig-align=\"center\"}\n\n## Margins \n\nIn addition, the code should not exceed the 80 character limit, so that all the code can be read when you render to PDF. To help with this, you can add a vertical line at 80 characters by clicking “Tools”  “Global Options”  “Code”  “Display”, then set “Margin Column” to 80, and click “Apply”.\n\n![](images/05-data-wrangling/marginline.png){fig-align=\"center\"}\n\n## Code Chunk Labels \n\n-- Informative names can help when navigating code. \n\n-- Informative names do not show up in Rendered documents (and that's okay!)\n\n![](images/05-data-wrangling/codechunklabel.png){fig-align=\"center\"}\n\n\n## R4DS: Chp 4 - Data transformation\n\nhttps://app.sli.do/event/56i17rXu3VTsLVtwRZCX9w\n\n## Warm up\n\n\n::: {.cell}\n\n:::\n\n\nWhat is the difference between long and wide data? \n\n![](images/05-data-wrangling/widelong.png){fig-align=\"center\"}\n\n\n\n# Application exercise\n\n## `ae-04`\n\n\n-   Go to the course [GitHub org](https://github.com/sta199-f22-1) and find your `ae-04` (repo name will be suffixed with your GitHub name).\n\n-   Clone the repo in your container, open the Quarto document in the repo, and follow along and complete the exercises.\n\n-   Render, commit, and push your edits by the AE deadline -- 3 days from today.\n\n\n## Recap of AE {.smaller}\n\n-   We can transform data to learn more about what's going on\n\n-   Pipe operator allows us to step through the process and combine multiple functions together \n\n-   Data are messy. This are valuable tools to tell the story you want\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}