{
  "hash": "5a7eb1100ee2156b6f7a8d392396e38b",
  "result": {
    "markdown": "---\ntitle: \"Tidying data\"\nsubtitle: \"Lecture 7\"\ndate: \"September 19, 2022\"\nformat: revealjs\n---\n\n\n## Checklist\n\n\n::: {.cell}\n\n:::\n\n\n-   Open your `ae-06` project in RStudio (that you already started on Tuesday), render your document, and commit and push.\n\n-   Any questions from prepare materials? Go to [slido](https://app.sli.do/event/jqUCoxmpsqKVcCKKwbn4Vg). You can also upvote others' questions.\n\n-   Lab 02 Due Tonight.\n\n-   Start Early. Render Often. Ask Questions.\n\n-   Groups are coming after Exam 1.\n\n## Goals:\n\n-- Understand `pivot_longer`\n\n-- ggplot practice\n\n-- Practice re-creating graphs\n\n-- \"New\" functions: if_else / scale_continuous_x\n\n## Warm Up: Tidying datasets\n\nWhat makes a dataset \"tidy\"?\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_2fa48f01\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Tidy Data\n\nThere are three interrelated rules that make a dataset tidy:\n\n-   Each variable is a column; each column is a variable.\n\n-   Each observation is row; each row is an observation.\n\n-   Each value is a cell; each cell is a single value.\n\n# Application exercise\n\n## `ae-06`\n\n-   Go to the course [GitHub org](https://github.com/sta199-f22-2) and find your `ae-06` (repo name will be suffixed with your GitHub name).\n-   Clone the repo in your container, open the Quarto document in the repo, and follow along and complete the exercises.\n-   Render, commit, and push your edits by the AE deadline -- 3 days from today.\n\n## Recap of AE {.smaller}\n\n-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.\n\n-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.\n\n-   `pivot_wider()` which makes datasets wider by increasing columns and reducing rows. `pivot_wider()` has the opposite interface to pivot_longer(): we need to provide the existing columns that define the values (values_from) and the column name (names_from).\n",
    "supporting": [
      "07-tidying-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}