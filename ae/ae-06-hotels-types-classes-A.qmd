---
title: "AE 07: Hotel bookings"
categories: 
  - Application exercise
editor: visual
---

::: callout-important
Go to the [course GitHub organization](https://github.com/sta199-f22-2) and locate the repo titled `ae-07-YOUR_GITHUB_USERNAME` to get started.

This AE is due Saturday, Sep 25 at 11:59pm.
:::

## Packages

We will use the following two packages in this application exercise.

-   **tidyverse**: For data import, wrangling, and visualization.
-   **skimr**: For summarizing the entire data frame at once.
-   **scales**: For better axis labels.


To be productive in R, you need to be familiar with the major types and the operations on these types. Each R object has a un underlying “type”, which determines the set of possible values for that object. You can find the type of an object using the typeof function.

logical: a logical value.

integer: an integer (positive or negative). Many R programmers do not use this mode since every integer value can be represented as a double.

double: a real number stored in “double-precision floatint point format.”

complex: a complex number

character: a sequence of characters, called a “string” in other programming languages

list: a list of named values

NULL: a special type with only one possible value, known as NULL

More information can be found here: https://statsandr.com/blog/data-types-in-r/


## Why This Matters

We are going to revisit the mtcars data set. Run ?mtcars to see the definition of each variable.

```{r}
#| message: false 
#| warning: false
library(tidyverse)
library(scales)
library(skimr)

mtcars07 <- read_csv("data/mtcars07.csv" , col_types = NULL)


glimpse(mtcars)

```

**3-min** Run the code below to create side-by-side boxplots of the number of mpg cars get versus the type of Engine they have. 
```{r}
mtcars |>
ggplot(
  aes(x = vs, y = mpg)
) +
  geom_boxplot()
```

Why doesn't this work? 

*Answer Here*

Edit the code below to fix the issue.

```{r}
mtcars |>
  mutate(vs = as.factor(vs)) |>
ggplot(
  aes(x = vs, y = mpg)
) +
  geom_boxplot()
```

Now, calculate the mean number of carburetors for the 32 cars in the data set. 

```{r}

```

Why doesn't this work? Fix the code so you can answer the question.

```{r}

```


## Type coercion

-   **Demo:** Determine the type of the following vector. And then, change the type to numeric.

    ```{r}
    x <- c("1", "2", "3")
    typeof(x)

    as.numeric(x)
    ```

-   **Demo:** Once again, determine the type of the following vector. And then, change the type to numeric. What's different than the previous exercise?

    ```{r}
    y <- c("a", "b", "c")
    typeof(y)

    as.numeric(y)
    ```

-   **Demo:** Once again, determine the type of the following vector. And then, change the type to numeric. What's different than the previous exercise?

    ```{r}
    z <- c("1", "2", "three")
    typeof(z)

    as.numeric(z)
    ```

-   **Demo:** Suppose you conducted a survey where you asked people how many cars their household owns collectively. And the answers are as follows:

    ```{r}
    survey_results <- tibble(cars = c(1, 2, "three"))
    survey_results
    ```

    This is annoying because of that third survey taker who just had to go and type out the number instead of providing as a numeric value. So now you need to update the `cars` variable to be numeric. You do the following

    ```{r}
    survey_results |>
      mutate(cars = as.numeric(cars))
    ```

    And now things are even more annoying because you get a warning `NAs introduced by coercion` that happened while computing `cars = as.numeric(cars)` and the response from the third survey taker is now an `NA` (you lost their data). Fix your `mutate()` call to avoid this warning.

    ```{r}
    survey_results |>
      mutate(
        cars = if_else(cars == "three", "3", cars),
        cars = as.numeric(cars)
        )
    ```

-   Your turn: First, guess the type of the vector. Then, check if you guessed right. I've done the first one for you, you'll see that it's helpful to check the type of each element of the vector first.

    -   `c(1, 1L, "C")`

```{r}
        v1 <- c(1, 1L, "C")

        # to help you guess
        typeof(1)
        typeof(1L)
        typeof("C")

        # to check after you guess
        typeof(v1)
```

    -   `c(1L / 0, "A")`

```{r}
        v2 <- c(1L / 0, "A")

        # to help you guess
        typeof(1L)
        typeof(0)
        typeof(1L / 0)
        typeof("A")

        # to check after you guess
        typeof(v2)
```

-   `c(1:3, 5)`

```{r}
        v3 <- c(1:3, 5)

        # to help you guess
        typeof(1:3)
        typeof(5)

        # to check after you guess
        typeof(v3)
```

    -   `c(3, "3+")`

```{r}
        v4 <- c(3, "3+")

        # to help you guess
        typeof(3)
        typeof("3+")

        # to check after you guess
        typeof(v4)
```

    -   `c(NA, TRUE)`

```{r}
        v5 <- c(NA, TRUE)

        # to help you guess
        typeof(NA)
        typeof(TRUE)

        # to check after you guess
        typeof(v5)
```

## Hotel bookings


```{r}
#| label: load-data
#| message: false

hotels <- read_csv("data/hotels.csv" , col_types = NULL)
problems()
```

After reading in the data set, you should see a Warning message. What does that message say? Explain the output of problems() in your own words. 

Take a look at the the following visualization. How are the months ordered? What would be a better order? Then, reorder the months on the x-axis (levels of `arrival_date_month`) in a way that makes more sense. You will want to use a function from the **forcats** package, see <https://forcats.tidyverse.org/reference/index.html> for inspiration and help.

![](images/hotel-prices-months.png){fig-align="center"}
Hints: 

-- use fct_relevel to order months 

-- use case_when to fix the input error 

-- calculate mean adr for each group for plot 

-- use theme_minimal 


```{r}
#| label: label-me

hotels %>%
  mutate(
  arrival_date_month = fct_relevel(arrival_date_month, "January", "February", "March", "April", "May", "June",
              "July", "August", "September", "October", "November", "December")) |>
  mutate(arrival_date_month = case_when(
    adr == "My average rate was 124" ~ 124,
    TRUE ~ as.numeric(adr)
  )) |>
  group_by(hotel, arrival_date_month) |>
  summarise(mean_adr = mean(adr)) %>%       # calculate mean adr for each group
  ggplot(aes(
    x = arrival_date_month,                 # x-axis = arrival_date_month
    y = mean_adr,                           # y-axis = mean_adr calculated above
    group = hotel,                          # group lines by hotel type
    color = hotel)                          # and color by hotel type
  ) +
  geom_line() +                             # use lines to represent data
  theme_minimal() +                         # use a minimal theme
  labs(
    x = "Arrival month",                 # customize labels
    y = "Mean ADR (average daily rate)",
    title = "Comparison of resort and city hotel prices across months",
    subtitle = "Resort hotel prices soar in the summer while ciry hotel prices remain relatively constant throughout the year",
    color = "Hotel type"
  ) +
  scale_y_continuous(labels = label_dollar())
  
```

**Stretch goal:** If you finish the above task before time is up, change the above code so that the y-axis labels are shown with dollar signs, e.g. \$80 instead of 80. You will want to use a function from the **scales** package, see <https://scales.r-lib.org/reference/index.html> for inspiration and help.
