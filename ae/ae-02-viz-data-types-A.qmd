---
title: "AE 02: Visualizing penguins"
subtitle: "Suggested answers"
categories: 
  - Application exercise
  - Answers
editor: visual
execute:
  fig-width: 7
  fig-asp: 4
  fig-align: center
  warning: false
---

::: callout-important
These are suggested answers.
This document should be used as reference only, it's not designed to be an exhaustive key.
:::

For all analyses, we'll use the **tidyverse** and **palmerpenguins** packages.

```{r}
#| label: load-packages
#| warning: false

library(tidyverse)
library(palmerpenguins)
```

The dataset we will visualize is called `penguins`.
Let's `glimpse()` at it.

```{r}
#| label: glimpse

glimpse(penguins)
```

# Visualizing penguin weights - Demo

## Single variable

::: callout-note
Analyzing the a single variable is called **univariate** analysis.
:::

Create visualizations of the distribution of `weight`s of penguins.

1.  Make a histogram. Set an appropriate binwidth.

```{r}
#| label: histogram-weight

ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 250)
```

2.  Make a boxplot.

```{r}
#| label: boxplot-weight

ggplot(penguins, aes(x = body_mass_g)) +
  geom_boxplot()
```

3.  Based on these, determine if each of the following statements about the shape of the distribution is true or false.
    -   The distribution of penguin weights in this sample is left skewed. **FALSE**
    -   The distribution of penguin weights in this sample is unimodal. **TRUE**

## Two variables

::: callout-note
Analyzing the relationship between two variables is called **bivariate** analysis.
:::

Create visualizations of the distribution of `weight`s of penguins by `species`.

4.  Make a single histogram. Set an appropriate binwidth.

```{r}
#| label: histogram-weight-species

ggplot(penguins, 
       aes(x = body_mass_g, fill = species)) +
  geom_histogram(binwidth = 250, alpha = 0.5, color = "black")
```

5.  Use multiple histograms via faceting, one for each species. Set an appropriate binwidth, add color as you see fit, and turn off legends if not needed.

```{r}
#| label: histogram-weight-species-facet

ggplot(penguins, 
       aes(x = body_mass_g, fill = species)) +
  geom_histogram(binwidth = 250, show.legend = FALSE) +
  facet_wrap(~species, ncol = 1)
```

6.  Use side-by-side box plots. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: boxplot-weight-species

ggplot(penguins, 
       aes(x = species, y = body_mass_g, fill = species)) +
  geom_boxplot(show.legend = FALSE)
```

7.  Use density plots. Add color as you see fit.

```{r}
#| label: density-weight-species

ggplot(penguins, 
       aes(x = body_mass_g, fill = species)) +
  geom_density(alpha = 0.5)
```

8.  Use violin plots. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: violin-weight-species

ggplot(penguins, 
       aes(x = species, y = body_mass_g, fill = species)) +
    geom_violin(alpha = 0.5, show.legend = FALSE)
```

9.  Make a jittered scatter plot. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: jitter-weight-species

ggplot(penguins, 
       aes(x = species, y = body_mass_g, color = species)) +
    geom_jitter(show.legend = FALSE)
```

10. Use beeswarm plots. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: beeswarm-weight-species

library(ggbeeswarm)

ggplot(penguins, 
       aes(x = species, y = body_mass_g, color = species)) +
  geom_beeswarm(show.legend = FALSE)
```

11. Use multiple geoms on a single plot. Be deliberate about the order of plotting. Change the theme and the color scale of the plot. Finally, add informative labels.

```{r}
#| label: multi-geoms

ggplot(penguins, 
       aes(x = species, y = body_mass_g, color = species)) +
  geom_beeswarm(show.legend = FALSE) +
  geom_boxplot(show.legend = FALSE, alpha = 0.5) +
  scale_color_viridis_d(option = "D", end = 0.8) +
  theme_minimal() +
  labs(
    x = "Species",
    y = "Body mass (g)",
    title = "Body mass of penguins in Palmer Archipelago",
    subtitle = "By species"
  )
```

## Multiple variables

::: callout-note
Analyzing the relationship between three or more variables is called **multivariate** analysis.
:::

12. Facet the plot you created in the previous exercise by `island`. Adjust labels accordingly.

```{r}
#| label: multi-geoms-facet

ggplot(penguins, 
       aes(x = species, y = body_mass_g, color = species)) +
  geom_beeswarm(show.legend = FALSE) +
  geom_boxplot(show.legend = FALSE, alpha = 0.5) +
  facet_wrap(~island) +
  scale_color_viridis_d(option = "D", end = 0.8) +
  theme_minimal() +
  labs(
    x = "Species",
    y = "Body mass (g)",
    title = "Body mass of penguins in Palmer Archipelago",
    subtitle = "By species and island"
  )
```

Before you continue, let's turn off all warnings the code chunks generate and resize all figures.
We'll do this by editing the YAML.

## Visualizing other variables - Your turn!

13. Pick a single categorical variable from the data set and make a bar plot of its distribution.

```{r}
#| label: barplot

```

14. Pick two categorical variables and make a visualization to visualize the relationship between the two variables. Along with your code and output, provide an interpretation of the visualization.

```{r}
#| label: cat-cat

```

Interpretation goes here...

15. Make another plot that uses at least three variables. At least one should be numeric and at least one categorical. In 1-2 sentences, describe what the plot shows about the relationships between the variables you plotted. Don't forget to label your code chunk.

```{r}
# add code here

```

Interpretation goes here...
