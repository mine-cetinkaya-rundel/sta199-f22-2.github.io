{
  "hash": "2951a6f5fe714e1e0189e7d9fb41d5f3",
  "result": {
    "markdown": "---\ntitle: \"AE 02: Visualizing penguins\"\nsubtitle: \"Suggested answers\"\ncategories: \n  - Application exercise\n  - Answers\neditor: visual\nexecute:\n  fig-width: 7\n  fig-asp: 4\n  fig-align: center\n  warning: false\n---\n\n\n::: callout-important\nThese are suggested answers. This document should be used as reference only, it's not designed to be an exhaustive key.\n:::\n\nFor all analyses, we'll use the **tidyverse** and **palmerpenguins** packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\nThe dataset we will visualize is called `penguins`. Let's `glimpse()` at it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\n# Visualizing penguin weights - Demo\n\n## Single variable\n\n::: callout-note\nAnalyzing the a single variable is called **univariate** analysis.\n:::\n\nCreate visualizations of the distribution of `weight`s of penguins.\n\n1.  Make a histogram. Set an appropriate binwidth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram(binwidth = 250)\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/histogram-weight-1.png){width=672}\n:::\n:::\n\n\n2.  Make a boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/boxplot-weight-1.png){width=672}\n:::\n:::\n\n\n3.  Based on these, determine if each of the following statements about the shape of the distribution is true or false.\n    -   The distribution of penguin weights in this sample is left skewed. **FALSE**\n    -   The distribution of penguin weights in this sample is unimodal. **TRUE**\n\n## Two variables\n\n::: callout-note\nAnalyzing the relationship between two variables is called **bivariate** analysis.\n:::\n\nCreate visualizations of the distribution of `weight`s of penguins by `species`.\n\n4.  Make a single histogram. Set an appropriate binwidth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g, fill = species)) +\n  geom_histogram(binwidth = 250, alpha = 0.5, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/histogram-weight-species-1.png){width=672}\n:::\n:::\n\n\n5.  Use multiple histograms via faceting, one for each species. Set an appropriate binwidth, add color as you see fit, and turn off legends if not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g, fill = species)) +\n  geom_histogram(binwidth = 250, show.legend = FALSE) +\n  facet_wrap(~species, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/histogram-weight-species-facet-1.png){width=672}\n:::\n:::\n\n\n6.  Use side-by-side box plots. Add color as you see fit and turn off legends if not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = species, y = body_mass_g, fill = species)) +\n  geom_boxplot(show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/boxplot-weight-species-1.png){width=672}\n:::\n:::\n\n\n7.  Use density plots. Add color as you see fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g, fill = species)) +\n  geom_density(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/density-weight-species-1.png){width=672}\n:::\n:::\n\n\n8.  Use violin plots. Add color as you see fit and turn off legends if not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = species, y = body_mass_g, fill = species)) +\n    geom_violin(alpha = 0.5, show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/violin-weight-species-1.png){width=672}\n:::\n:::\n\n\n9.  Make a jittered scatter plot. Add color as you see fit and turn off legends if not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = species, y = body_mass_g, color = species)) +\n    geom_jitter(show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/jitter-weight-species-1.png){width=672}\n:::\n:::\n\n\n10. Use beeswarm plots. Add color as you see fit and turn off legends if not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggbeeswarm)\n\nggplot(penguins, \n       aes(x = species, y = body_mass_g, color = species)) +\n  geom_beeswarm(show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/beeswarm-weight-species-1.png){width=672}\n:::\n:::\n\n\n11. Use multiple geoms on a single plot. Be deliberate about the order of plotting. Change the theme and the color scale of the plot. Finally, add informative labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = species, y = body_mass_g, color = species)) +\n  geom_beeswarm(show.legend = FALSE) +\n  geom_boxplot(show.legend = FALSE, alpha = 0.5) +\n  scale_color_viridis_d(option = \"D\", end = 0.8) +\n  theme_minimal() +\n  labs(\n    x = \"Species\",\n    y = \"Body mass (g)\",\n    title = \"Body mass of penguins in Palmer Archipelago\",\n    subtitle = \"By species\"\n  )\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/multi-geoms-1.png){width=672}\n:::\n:::\n\n\n## Multiple variables\n\n::: callout-note\nAnalyzing the relationship between three or more variables is called **multivariate** analysis.\n:::\n\n12. Facet the plot you created in the previous exercise by `island`. Adjust labels accordingly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = species, y = body_mass_g, color = species)) +\n  geom_beeswarm(show.legend = FALSE) +\n  geom_boxplot(show.legend = FALSE, alpha = 0.5) +\n  facet_wrap(~island) +\n  scale_color_viridis_d(option = \"D\", end = 0.8) +\n  theme_minimal() +\n  labs(\n    x = \"Species\",\n    y = \"Body mass (g)\",\n    title = \"Body mass of penguins in Palmer Archipelago\",\n    subtitle = \"By species and island\"\n  )\n```\n\n::: {.cell-output-display}\n![](ae-02-viz-data-types-A_files/figure-html/multi-geoms-facet-1.png){width=672}\n:::\n:::\n\n\nBefore you continue, let's turn off all warnings the code chunks generate and resize all figures. We'll do this by editing the YAML.\n\n## Visualizing other variables - Your turn!\n\n13. Pick a single categorical variable from the data set and make a bar plot of its distribution.\n\n\n::: {.cell}\n\n:::\n\n\n14. Pick two categorical variables and make a visualization to visualize the relationship between the two variables. Along with your code and output, provide an interpretation of the visualization.\n\n\n::: {.cell}\n\n:::\n\n\nInterpretation goes here...\n\n15. Make another plot that uses at least three variables. At least one should be numeric and at least one categorical. In 1-2 sentences, describe what the plot shows about the relationships between the variables you plotted. Don't forget to label your code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\nInterpretation goes here...\n",
    "supporting": [
      "ae-02-viz-data-types-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}